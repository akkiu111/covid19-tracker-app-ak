{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/Country/Country.jsx","images/covid19image.jpg","App.js","reportWebVitals.js","index.js","App.module.css","components/Chart/Chart.module.css","components/Country/Country.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","country","className","styles","container","Typography","gutterBottom","variant","component","fontFamily","Grid","spacing","justify","item","Card","maxWidth","xs","md","clnms","card","infected","CardContent","color","start","end","value","duration","separator","Date","toDateString","url","fetchData","a","updateUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","initialDailyData","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Country","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountriesAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","index","App","state","fetchedData","setState","this","img","src","covid19Image","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e83cdd3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3wz_w\",\"h2\":\"Cards_h2__28Hhc\",\"card\":\"Cards_card__2eWWs\",\"infected\":\"Cards_infected__1Vj2V\",\"recovered\":\"Cards_recovered__3daLh\",\"deaths\":\"Cards_deaths__tLl5z\"};","import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport clnms from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate }, country }) => {\r\n    if(!confirmed){\r\n        return 'loading......';\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n        <Typography gutterBottom variant=\"h4\" component=\"h2\"\r\n            fontFamily = \"Roboto, Helvetica, Arial, sans-serif\"\r\n            >{country ? country : 'Global'}</Typography>\r\n            <Grid container spacing = {3} justify = 'center'>\r\n                <Grid item component = {Card} maxWidth=\"lg\" xs ={12} md={3} className={clnms(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\r\n                        <Typography  variant='h5' component='h2'>\r\n                            <CountUp start={0} end={confirmed.value} duration={1.25} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2' component='p'>active cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component = {Card} maxWidth=\"lg\" xs ={12} md={3} className={clnms(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography  variant='h5'component='h2'>\r\n                        <CountUp start={0} end={recovered.value} duration={1.25} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2' component='p'>recovered cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component = {Card} maxWidth=\"lg\" xs ={12} md={3} className={clnms(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography  variant='h5'component='h2'>\r\n                        <CountUp start={0} end={deaths.value} duration={1.25} separator=\",\"/>\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2' component='p'>total deaths</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cards;","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let updateUrl = url;\r\n\r\n  if (country) {\r\n    updateUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(updateUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data : {confirmed, recovered, deaths}, country}) =>{\r\n    const [dailyData, setDailyData] = useState({});\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchAPI = async () => {\r\n            \r\n            const initialDailyData = await fetchDailyData();\r\n\r\n            setDailyData(initialDailyData);\r\n        };\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\nconsole.log(recovered, deaths, confirmed);\r\n    const lineChart = (\r\n           dailyData.length\r\n           ? ( \r\n           <Line\r\n                data = {{\r\n                 labels: dailyData.map(({date}) => new Date(date).toDateString()),\r\n                 datasets: [\r\n                    {\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label : 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true\r\n                    },\r\n\r\n                   {\r\n                    data: dailyData.map(({recovered}) => recovered),\r\n                    label : 'Recovered',\r\n                    borderColor: 'green',\r\n                    backgroundColor: 'rgba(0, 255, 0, 0.5)',\r\n                    fill: true\r\n                   },\r\n                \r\n                 {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label : 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true\r\n                 }\r\n                ]\r\n              }}\r\n            />) : null\r\n    );\r\n\r\n\r\n    const barChart = (\r\n        confirmed\r\n        ? ( \r\n        <Bar\r\n             data = {{\r\n              labels: ['Infected', 'Recovered', 'Deaths'],\r\n              datasets: [{\r\n                 label : 'People',\r\n                 backgroundColor: ['blue', 'green', 'red'],\r\n                 data : [confirmed.value, recovered.value, deaths.value]\r\n              },],\r\n           }}\r\n\r\n           options={{\r\n               legend: { display: false },\r\n               title: { display: true,\r\n                text:`Current situation in ${country}`},\r\n           }}\r\n         />) : null\r\n );\r\n\r\n    return(\r\n        <div className = {styles.container}>\r\n            \r\n            { country ? barChart : lineChart}\r\n\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './Country.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst Country = ({handleCountryChange}) =>{\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchCountriesAPI = async () => {\r\n        setFetchedCountries(await fetchCountries()); \r\n        }\r\n\r\n        fetchCountriesAPI();\r\n\r\n    }, []);\r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value =\"\">Global</option>\r\n                {fetchedCountries.map((country, index) => \r\n                <option key={index} value={country}>\r\n                    {country}\r\n                    </option>)}\r\n            </NativeSelect>\r\n        </FormControl>    \r\n);\r\n};\r\n\r\nexport default Country;","export default __webpack_public_path__ + \"static/media/covid19image.19e51d5b.jpg\";","import React from \"react\";\nimport { Cards, Chart, Country } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData } from \"./api\";\nimport covid19Image from \"./images/covid19image.jpg\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div className={styles.container}>\n        <img className={styles.img} src={covid19Image} alt=\"COVID-19\" />\n        <Cards data={data} country={country} />\n        <Country handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3yNCb\",\"img\":\"App_img__x6vEK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__I3r2X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Country_formControl__pniQS\"};"],"sourceRoot":""}